[{"/home/stranger/task-github-api/src/index.js":"1","/home/stranger/task-github-api/src/App.js":"2","/home/stranger/task-github-api/src/reportWebVitals.js":"3","/home/stranger/task-github-api/src/components/MainComponent.js":"4","/home/stranger/task-github-api/src/components/SearchBar.js":"5","/home/stranger/task-github-api/src/components/UserInfoCard.js":"6","/home/stranger/task-github-api/src/components/LocalStorage.js":"7"},{"size":500,"mtime":1608833310435,"results":"8","hashOfConfig":"9"},{"size":290,"mtime":1608835268785,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1608833310435,"results":"11","hashOfConfig":"9"},{"size":2000,"mtime":1608960324878,"results":"12","hashOfConfig":"9"},{"size":563,"mtime":1608837033907,"results":"13","hashOfConfig":"9"},{"size":489,"mtime":1608889058730,"results":"14","hashOfConfig":"9"},{"size":1055,"mtime":1608901237962,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"f806v5",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"18"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"18"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"34"},"/home/stranger/task-github-api/src/index.js",[],["35","36"],"/home/stranger/task-github-api/src/App.js",[],"/home/stranger/task-github-api/src/reportWebVitals.js",[],"/home/stranger/task-github-api/src/components/MainComponent.js",["37","38","39","40"],"import React, {useState, useEffect, useRef} from \"react\";\nimport SearchBar from \"./SearchBar\";\nimport UserInfoCard from \"./UserInfoCard\";\nimport LocalStorage from \"./LocalStorage\";\n\n\n// Using a Map here, since we require constant time access and deletion capability\nif(!localStorage.getItem(\"sD\")){\n    localStorage.setItem(\"sD\",JSON.stringify(new Object()));\n}\n// var storedData = JSON.parse(localStorage.getItem(\"sD\") || \"{}\");\n\nfunction Main(){\n    const [username,setUsername] = useState(\"\");\n    const [userData, setUserData] = useState(Object);\n    const [storedData, setStoredData] = useState(JSON.parse(localStorage.getItem(\"sD\")));\n    // console.log(storedData)\n    useEffect(() => {\n        getUserData();\n    }, [username]);\n\n    useEffect(() => {\n        if(Object.keys(userData).length!==0 && userData.message!==\"Not Found\" && !(userData.login in storedData) ){\n            storedData[userData.login] = userData;\n            localStorage.setItem(\"sD\",JSON.stringify(storedData))\n            alert(`User ${userData.login} added to Local Storage.`)\n        }\n        setStoredData(JSON.parse(localStorage.getItem(\"sD\")))\n    }, [userData]);\n\n    useEffect(()=>{\n        console.log()\n    },[storedData])\n    var gitHubUrl = `https://api.github.com/users/${username}`;\n\n    const getUserData = async () => {\n        const response = await fetch(gitHubUrl);\n        const jsonData = await response.json();\n        if(jsonData && jsonData.message!==\"Not Found\"){\n            setUserData(jsonData);\n        }\n        else if(username!==\"\"){\n            console.log('Username does not exist');\n        }\n        else{\n            setUserData({})         \n        }\n    };\n    return(\n        <div>\n            <SearchBar username= {username} setUsername = {setUsername}  />\n            <UserInfoCard userData = {userData} />\n            <h2>Local Storage</h2>\n            <LocalStorage storedData = {storedData} setStoredData = {setStoredData} />\n        </div>\n    );\n\n}\n\nexport default Main;","/home/stranger/task-github-api/src/components/SearchBar.js",[],"/home/stranger/task-github-api/src/components/UserInfoCard.js",["41"],"import React from \"react\";\n\nfunction UserInfoCard({userData}){\n    return(\n        <div className = \"datacontainer\">\n            {userData.avatar_url ? (<div className=\"dataitem\"><img src={userData.avatar_url} /></div>):(<div></div>)}\n            {userData.name ? (<div className=\"dataitem\">Name : {userData.name}</div>):(<div></div>)}\n            {userData.blog ? (<div className=\"dataitem\">Blog: {userData.blog}</div>):(<div></div>)}\n        </div>\n    );\n}\n\nexport default UserInfoCard;","/home/stranger/task-github-api/src/components/LocalStorage.js",["42"],"import React from \"react\";\n\nfunction LocalStorage({storedData,setStoredData}){\n    // console.log(storedData)\n    var items = [];\n    Object.entries(storedData).forEach((entry) => {\n        const [key,val] = entry;\n        // console.log(key);\n        items.push(\n            <div>\n                {val.avatar_url ? (<div className=\"localitem\"><div className= \"imgcontainer\"><img src={val.avatar_url} />\n                <button className=\"btn\" onClick={()=>{\n                    delete storedData[key];\n                    localStorage.setItem(\"sD\",JSON.stringify(storedData))\n                    alert(`User ${key} removed from Local Storage.`)\n                    setStoredData(JSON.parse(localStorage.getItem(\"sD\")))\n                }}>X\n                </button>\n                </div></div>):(<div></div>)}\n                {val.name ? (<div className=\"localitem\">{val.name}</div>):(<div></div>)}\n            </div>\n    )\n    }\n        \n    )\n    return(\n        <div className = \"localcontainer\">{items}</div>\n    );\n\n\n}\n\nexport default LocalStorage;",["43","44"],{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","severity":1,"message":"50","line":1,"column":37,"nodeType":"51","messageId":"52","endLine":1,"endColumn":43},{"ruleId":"53","severity":1,"message":"54","line":9,"column":46,"nodeType":"55","messageId":"56","endLine":9,"endColumn":58},{"ruleId":"57","severity":1,"message":"58","line":20,"column":8,"nodeType":"59","endLine":20,"endColumn":18,"suggestions":"60"},{"ruleId":"57","severity":1,"message":"61","line":29,"column":8,"nodeType":"59","endLine":29,"endColumn":18,"suggestions":"62"},{"ruleId":"63","severity":1,"message":"64","line":6,"column":63,"nodeType":"65","endLine":6,"endColumn":96},{"ruleId":"63","severity":1,"message":"64","line":11,"column":94,"nodeType":"65","endLine":11,"endColumn":122},{"ruleId":"45","replacedBy":"66"},{"ruleId":"47","replacedBy":"67"},"no-native-reassign",["68"],"no-negated-in-lhs",["69"],"no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar","no-new-object","The object literal notation {} is preferrable.","NewExpression","preferLiteral","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getUserData'. Either include it or remove the dependency array.","ArrayExpression",["70"],"React Hook useEffect has a missing dependency: 'storedData'. Either include it or remove the dependency array.",["71"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["68"],["69"],"no-global-assign","no-unsafe-negation",{"desc":"72","fix":"73"},{"desc":"74","fix":"75"},"Update the dependencies array to be: [getUserData, username]",{"range":"76","text":"77"},"Update the dependencies array to be: [storedData, userData]",{"range":"78","text":"79"},[724,734],"[getUserData, username]",[1140,1150],"[storedData, userData]"]